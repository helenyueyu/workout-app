{"version":3,"sources":["components/Title.js","components/Exercise.js","components/PreviousTitle.js","components/PreviousWorkout.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","Exercise","props","className","difficulty","exercise","PreviousTitle","PreviousWorkout","workout","time","easyLevel","mediumLevel","hardLevel","expertLevel","getTime","current","Math","round","Date","getSeconds","floor","getExercise","level","random","length","immutableUnshift","arr","newEntry","concat","Object","toConsumableArray","App","state","button","clock","previousWorkouts","previousTimes","handleEasy","e","preventDefault","_this","setState","handleMedium","handleHard","handleExpert","handleClick","interval","setInterval","clearInterval","handleSubmit","slice","this","components_Title","onClick","src_components_Exercise","components_PreviousTitle","src_components_PreviousWorkout","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.434b208a.chunk.js","sourcesContent":["import React from 'react'\n\nconst Title = () => (\n  <h1>Daily Workout</h1>\n)\n\nexport default Title\n","import React from 'react'\nimport './Exercise.css'\n\n\nconst Exercise = (props) => (\n  <div>\n    <span className=\"difficulty\">Difficulty: </span><span className=\"difficulty-level\">{props.difficulty}</span>\n     <br/>\n    {props.exercise}\n  </div>\n)\n\n// class Exercise extends Component {\n//   state = {\n//     difficulty: 'easy',\n//     exercise: easyLevel[Math.floor(Math.random()*easyLevel.length)]\n//   }\n//   handleEasy = (e) => {\n//     e.preventDefault();\n//     this.setState({\n//       difficulty: 'easy',\n//       exercise: easyLevel[Math.floor(Math.random()*easyLevel.length)]\n//     })\n//   }\n//   handleMedium = (e) => {\n//     e.preventDefault();\n//     this.setState({\n//       difficulty: 'medium',\n//       exercise: mediumLevel[Math.floor(Math.random()*mediumLevel.length)]\n//     })\n//   }\n//   handleHard = (e) => {\n//     e.preventDefault();\n//     this.setState({\n//       difficulty: 'hard',\n//       exercise: hardLevel[Math.floor(Math.random()*hardLevel.length)]\n//     })\n//   }\n//   handleExpert = (e) => {\n//     e.preventDefault();\n//     this.setState({\n//       difficulty: 'expert',\n//       exercise: expertLevel[Math.floor(Math.random()*expertLevel.length)]\n//     })\n//   }\n//   render() {\n//     return (\n//       <div className=\"custom\">\n//         <h1>{this.state.exercise}</h1>\n//         <p><span className=\"difficulty\">Difficulty:</span> <span className=\"difficulty-level\">{this.state.difficulty}</span></p>\n//         <button className=\"btn btn-floating btn-large\" onClick={this.handleEasy}>Easy</button>\n//         <button className=\"btn btn-floating btn-large\" onClick={this.handleMedium}>Medium</button>\n//         <button className=\"btn btn-floating btn-large\" onClick={this.handleHard}>Hard</button>\n//         <button className=\"btn btn-floating btn-large\" onClick={this.handleExpert}>Expert</button>\n//       </div>\n//     )\n//   }\n// }\n\n\nexport default Exercise\n","import React from 'react'\n\nconst PreviousTitle = () => (\n  <h1>Past Workouts</h1>\n)\n\nexport default PreviousTitle\n","import React from 'react'\nimport './PreviousWorkout.css'\n\nconst PreviousWorkout = (props) => (\n  <h1 className=\"prevworkout\">{props.workout}\n    <span className=\"prevtime\">{props.time}</span></h1>\n)\n\nexport default PreviousWorkout\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Title from './components/Title'\nimport Exercise from './components/Exercise'\nimport PreviousTitle from './components/PreviousTitle'\nimport PreviousWorkout from './components/PreviousWorkout'\n\n\nlet easyLevel = ['10 pushups', '10 situps', '5 jumping jacks', '5 lunges', '5 squats', '30 second plank', '1 mile run']\nlet mediumLevel = ['25 pushups', '25 situps', '15 jumping jacks', '10 lunges', '10 squats', '1 min plank', '2 mile run']\nlet hardLevel = ['50 pushups', '50 situps', '30 jumping jacks', '20 lunges', '15 squats', '2 min plank', '5 mile run']\nlet expertLevel = ['100 pushups', '100 situps', '60 jumping jacks', '40 lunges', '30 squats', '5 min plank', '10 mile run']\n\nfunction getTime(current) {\n  return Math.round((new Date().getTime() - current)/1000)\n}\n\nfunction getSeconds(current) {\n  return Math.round((new Date().getTime() - current)/1000) - Math.floor(getTime(current)*0.0166667)*60\n}\n\nfunction getExercise(level) {\n  return level[Math.floor(Math.random()*level.length)]\n}\nfunction immutableUnshift(arr, newEntry) {\n  return [newEntry, ...arr];\n}\n\nclass App extends Component {\n  state = {\n    button: 'start',\n    clock: '0:00:00',\n    difficulty: 'easy',\n    exercise: easyLevel[Math.floor(Math.random()*easyLevel.length)],\n    previousWorkouts: ['Empty', 'Empty', 'Empty', 'Empty', 'Empty', 'Empty', 'Empty', 'Empty'],\n    previousTimes: ['0', '0', '0', '0', '0', '0', '0', '0']\n  }\n  handleEasy = (e) => {\n    e.preventDefault();\n    this.setState({\n      difficulty: 'easy',\n      exercise: getExercise(easyLevel)\n    })\n  }\n  handleMedium = (e) => {\n    e.preventDefault();\n    this.setState({\n      difficulty: 'medium',\n      exercise: getExercise(mediumLevel)\n    })\n  }\n  handleHard = (e) => {\n    e.preventDefault();\n    this.setState({\n      difficulty: 'hard',\n      exercise: getExercise(hardLevel)\n    })\n  }\n  handleExpert = (e) => {\n    e.preventDefault();\n    this.setState({\n      difficulty: 'expert',\n      exercise: getExercise(expertLevel)\n    })\n  }\n  handleClick = (e) => {\n    e.preventDefault();\n    let current = new Date().getTime();\n    if (this.state.button === 'start') {\n      this.interval = setInterval(() => this.setState({\n        button: 'stop',\n        clock: (getTime(current) < 10) ? '0:00:0' + getTime(current) :\n        (getTime(current) < 60) ? '0:00:' + getTime(current) :\n        (getTime(current) < 600) ? '0:0' + Math.floor(getTime(current)*0.0166667) + ':' + ((getSeconds(current) < 10) ? '0' + getSeconds(current) : getSeconds(current)) : 'Overtime'\n      }),\n      1000);\n    } else {\n      clearInterval(this.interval);\n      this.setState({\n        button: 'start'\n      })\n    }\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.setState({\n      previousWorkouts: immutableUnshift(this.state.previousWorkouts.slice(0, -1), this.state.exercise),\n      previousTimes: immutableUnshift(this.state.previousTimes.slice(0, -1), this.state.clock)\n    })\n  }\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col s6 card-panel teal lighten-4\">\n          <div className=\"title\">\n            <Title />\n          </div>\n          <div className=\"timer\">\n            <button className=\"teal btn startbutton\" onClick={this.handleClick}>{this.state.button}</button>\n            <h1>{this.state.clock}</h1>\n          </div>\n          <div className=\"exercise\">\n            <Exercise difficulty={this.state.difficulty} exercise={this.state.exercise}/>\n            <br />\n            <button className=\"btn btn-floating btn-large\" onClick={this.handleEasy}>Easy</button>\n            <button className=\"btn btn-floating btn-large\" onClick={this.handleMedium}>Medium</button>\n            <button className=\"btn btn-floating btn-large\" onClick={this.handleHard}>Hard</button>\n            <button className=\"btn btn-floating btn-large\" onClick={this.handleExpert}>Expert</button>\n          </div>\n          <div className=\"submitbutton\">\n            <button className=\"btn black submit\" onClick={this.handleSubmit}>Finished!</button>\n          </div>\n        </div>\n        <div className=\"col s6 card-panel teal lighten-4\">\n          <div className=\"prevtitle\">\n            <PreviousTitle />\n          </div>\n          <div className=\"previous-workout\">\n            <div className=\"breaker\">\n              <PreviousWorkout workout={this.state.previousWorkouts[0]} time={this.state.previousTimes[0]}/>\n            </div>\n            <div className=\"breaker\">\n            <PreviousWorkout workout={this.state.previousWorkouts[1]} time={this.state.previousTimes[1]}/>\n          </div>\n          <div className=\"breaker\">\n            <PreviousWorkout workout={this.state.previousWorkouts[2]} time={this.state.previousTimes[2]}/>\n          </div>\n          <div className=\"breaker\">\n            <PreviousWorkout workout={this.state.previousWorkouts[3]} time={this.state.previousTimes[3]}/>\n          </div>\n          <div className=\"breaker\">\n            <PreviousWorkout workout={this.state.previousWorkouts[4]} time={this.state.previousTimes[4]}/>\n          </div>\n          <div className=\"breaker\">\n            <PreviousWorkout workout={this.state.previousWorkouts[5]} time={this.state.previousTimes[5]}/>\n          </div>\n          <div className=\"breaker\">\n            <PreviousWorkout workout={this.state.previousWorkouts[6]} time={this.state.previousTimes[6]}/>\n          </div>\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}